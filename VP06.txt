#VP06   Recorder: Zachary Tisale   Summarizer: Benjamin Linam

from __future__ import division, print_function
from visual import *
scene.width = scene.height = 800

#constants
G = 6.7e-11
mEarth = 6e24
mMoon = 7e22
mcraft = 15e3
deltat = 60
sf = scalefactor = .3
sf2 = scalefactor = 2e4
sf3 = scalefactor = 2e4

#objects
Earth = sphere(pos=vector(0,0,0), radius=6.4e6, color=color.cyan)
Moon = sphere(pos=vector(4e8, 0, 0), radius=1.75e6, color=color.green)
craft = sphere(pos=vector(-10*Earth.radius, 0,0), radius=1e6, color=color.yellow, make_trail=True)
vcraft = vector(0,3.2735e3,0)  #3.28e3 crashes into moon. 3.257e3 crashes into earth. 3.2735e3 makes figure-8
pcraft = mcraft*vcraft
t = 0
deltat = 10

#computations
r = Earth.pos-craft.pos
r2 = Moon.pos-craft.pos
rhat = r/mag(r)
rhat2 = r2/mag(r2)
Fmag_e = G * mEarth * mcraft/mag(r)**2  #_e for earth, _m for moon
Fmag_m = G * mMoon * mcraft/mag(r2)**2
Fgrav_e = Fmag_e * (rhat)
Fgrav_m = Fmag_m * (rhat2)
Fnet = Fgrav_e + Fgrav_m

#arrows
parr = arrow(pos=craft.pos, axis=pcraft, shaftwidth=5e5, color=color.yellow)
farr = arrow(pos=craft.pos, axis=Fnet, shaftwidth = 5e5, color=color.red)
##farr2 = arrow(pos=craft.pos, axis=Fgrav_m, shaftwidth = 5e5, color=color.orange)
scene.autoscale = False ##turn off automatic camera zoom
scene.center = (Earth.pos + Moon.pos)/2

print('initial momentum =', pcraft)
print('distance =', Earth.pos-craft.pos)

while t < 60*24*60*60:
    rate(1e4)
    r = Earth.pos-craft.pos
    rhat = r/mag(r)
    Fmag_e = G * mEarth * mcraft/mag(r)**2
    Fgrav_e = Fmag_e * (rhat)
    r2 = Moon.pos-craft.pos
    rhat2 = r2/mag(r2)
    Fmag_m = G * mMoon * mcraft/mag(r2)**2
    Fgrav_m = Fmag_m * (rhat2)
    Fnet = Fgrav_e + Fgrav_m
    pcraft = pcraft + Fnet*deltat
    craft.pos = craft.pos + (pcraft/mcraft)*deltat
    t = t+deltat
    parr.pos = craft.pos
    parr.axis = pcraft * sf
    farr.pos = craft.pos
    farr.axis = Fnet * sf2
    ##farr2.pos = craft.pos
    ##farr2.axis = Fgrav_m * sf3
    if mag(r) < Earth.radius:
        break ## exit from the loop
    if mag(r2) < Moon.radius:
        break ## exist from the loop
    

